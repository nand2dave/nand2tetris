// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // i  _  _  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00

    Not(in=instruction[15], out=notOut);
    Mux16(a=aluOut,b=instruction,sel=notOut,out=FirstMuxOut);

    // If it's an A-Instruction or d1=1, it the input value should be loaded to the A-Register
    Or(a=notOut, b=instruction[5], out=orOut);
    ARegister(in=FirstMuxOut, load=orOut, out=ARegisterOut, out[0..14]=addressM);

    // Is it a C-Instruction and d3=1? => take memory value, otherwise take A-Register value
    And(a=instruction[15], b=instruction[12], out=AMSwitch);
    Mux16(a=ARegisterOut, b=inM, sel=AMSwitch, out=ARegisterOrMemory);
    
    // Is it a C-Instruction and d2=1? => take memory value, otherwise take A-Register value
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut,load=loadD, out=DRegisterOut);

    ALU(x=DRegisterOut, y=ARegisterOrMemory, out=aluOut, out=outM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],

        zr=zrOut,
        ng=ngOut
    );

    // Is it a C-Instruction and the d3-bit is 1? => write to memory
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Handling the jump for the Program Counter
    // Was ALU output a positive value?
    Or(a=zrOut,b=ngOut,out=notpos);
    Not(in=notpos,out=pos);

    And(a=instruction[0],b=pos,out=j3); // j3=1 and ALU output is > 0
    And(a=instruction[1],b=zrOut,out=j2); // j2=1 and ALU output is = 0
    And(a=instruction[2],b=ngOut,out=j1); // j1=1 and ALU output is < 0

    Or(a=j1,b=j2,out=j1Or2);
    Or(a=j1Or2,b=j3,out=j1Or2Or3);

    // Make sure, it's a C-Instruction
    And(a=j1Or2Or3,b=instruction[15],out=jump);

    // When there is a jump, then load the ARegisterOut value
    PC(in=ARegisterOut,load=jump,reset=reset,inc=true,out[0..14]=pc);
}